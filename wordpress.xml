<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2.1" created="2012-10-07 03:46" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>xinlinqi&#039;s Blog</title>
	<link>http://xinlinqi.sinaapp.com</link>
	<description>叨叨一个挨踢民工的烦琐事</description>
	<pubDate>Sun, 07 Oct 2012 03:46:21 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://xinlinqi.sinaapp.com</wp:base_site_url>
	<wp:base_blog_url>http://xinlinqi.sinaapp.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>xinlinqi</wp:author_login><wp:author_email>xinlinqi8@gmail.com</wp:author_email><wp:author_display_name><![CDATA[xinlinqi]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.2.1</generator>

	<item>
		<title>十个著名的思想实验（神奇的思想）【转自Acfun】</title>
		<link>http://xinlinqi.sinaapp.com/2011/10/29/%e5%8d%81%e4%b8%aa%e8%91%97%e5%90%8d%e7%9a%84%e6%80%9d%e6%83%b3%e5%ae%9e%e9%aa%8c%ef%bc%88%e7%a5%9e%e5%a5%87%e7%9a%84%e6%80%9d%e6%83%b3%ef%bc%89%e3%80%90%e8%bd%ac%e8%87%aaacfun%e3%80%91/</link>
		<pubDate>Sat, 29 Oct 2011 16:37:12 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>10．电车难题（The Trolley Problem）
</strong>“电车难题”是伦理学领域最为知名的思想实 验之一，其内容大致是：一个疯子把五个无辜的人绑在电车轨道上。一辆失控的电车朝他们驶来，并且片刻后就要碾压到他们。幸运的是，你可以拉一个拉杆，让电 车开到另一条轨道上。但是还有一个问题，那个疯子在那另一条轨道上也绑了一个人。考虑以上状况，你应该拉拉杆吗？
<strong>解读：</strong>
电 车难题最早是由哲学家Philippa Foot提出的，用来批判伦理哲学中的主要理论，特别是功利主义。功利主义提出的观点是，大部分道德决策都是根据“为最多的人提供最大的利益”的原则做出 的。从一个功利主义者的观点来看，明显的选择应该是拉拉杆，拯救五个人只杀死一个人。但是功利主义的批判者认为，一旦拉了拉杆，你就成为一个不道德行为的 同谋——你要为另一条轨道上单独的一个人的死负部分责任。然而，其他人认为，你身处这种状况下就要求你要有所作为，你的不作为将会是同等的不道德。总之， 不存在完全的道德行为，这就是重点所在。许多哲学家都用电车难题作为例子来表示现实生活中的状况经常强迫一个人违背他自己的道德准则，并且还存在着没有完 全道德做法的情况。

<strong>9．空地上的奶牛（The Cow in the field）</strong>
认知 论 领域的一个最重要的思想实验就是“空地上的奶牛”。它描述的是，一个农民担心自己的获奖的奶牛走丢了。这时送奶工到了农场，他告诉农民不要担心，因为他看 到那头奶牛在附件的一块空地上。虽然农民很相信送奶工，但他还是亲自看了看，他看到了熟悉的黑白相间的形状并感到很满意。过了一会，送奶工到那块空地上再 次确认。那头奶牛确实在那，但它躲在树林里，而且空地上还有一大张黑白相间的纸缠在树上，很明显，农民把这张纸错当成自己的奶牛了。问题是出现了，虽然奶 牛一直都在空地上，但农民说自己知道奶牛在空地上时是否正确？

<strong>解读：</strong>
空地上的奶牛最初是 被 Edmund Gettier用来批判主流上作为知识的定义的JTB（justified true belief）理论，即当人们相信一件事时，它就成为了知识；这件事在事实上是真的，并且人们有可以验证的理由相信它。在这个实验中，农民相信奶牛在空地 上，且被送奶工的证词和他自己对于空地上的黑白相间物的观察所证实。而且经过送奶工后来的证实，这件事也是真实的。尽管如此，农民并没有真正的知道奶牛在 那儿，因为他认为奶牛在那儿的推导是建立在错误的前提上的。Gettier利用这个实验和其他一些例子，解释了将知识定义为JTB的理论需要修正。

<strong>8．定时炸弹（The Ticking Time Bomb）</strong>
如果你关注近几年的政治时事，或者看过动作电影，那么你对于“定时炸弹”思想实验肯定很熟悉。它要求你想象一个炸弹或其他大规模杀伤性武器藏在你的城市中，并且爆炸的倒计时马上就到零了。在羁押中有一个知情者，他知道炸弹的埋藏点。你是否会使用酷刑来获取情报？
<strong>解读：
</strong>与 电车难题类似，定时炸弹情景也是强迫一个人从两个不道德行径中选择的伦理问题。它一般被用作对那些说在任何情况下都不能使用酷刑的反驳。它也被用作在极端 形势下法律——就像美国的严禁虐囚的法律——可以被放在第二位的例子。归功于像《24小时》的电视节目和各种政治辩论，定时炸弹情景已成为最常引用的思想 实验之一。今年早些时候，一份英国报纸提出了更为极端的看法。这份报纸提议说，如果那个恐怖分子对酷刑毫无反应，那么当局者是否愿意拷打他的妻子儿女来获 取情报。

&nbsp;

<strong>7．爱因斯坦的光线（Einstein’s Light Beam）</strong>
爱 因斯坦著名的狭义相对论是受启于他16岁做的思想实验。在他的自传中，爱因斯坦回忆道他当时幻想在宇宙中追寻一道光线。他推理说，如果他能够以光速在光线 旁边运动，那么他应该能够看到光线成为“在空间上不断振荡但停滞不前的电磁场”。对于爱因斯坦，这个思想实验证明了对于这个虚拟的观察者，所有的物理定律 应该和一个相对于地球静止的观察者观察到的一样。

<strong>解读：</strong>
事实上，没人确切知道这意味着什么。科学家一直都在争论一个如此简单的思想实验是如此帮助爱因斯坦完成到狭义相对论这如此巨大的飞跃的。在当时，这个实验中的想法与现在已被抛弃的“以太”理论相违背。但他经过了好多年才证明了自己是正确的。

<strong>6．特修斯之船（The Ship of Theseus）</strong>
最 为古老的思想实验之一。最早出自普鲁塔克的记载。它描述的是一艘可以在海上航行几百年的船，归功于不间断的维修和替换部件。只要一块木板腐烂了，它就会被 替换掉，以此类推，直到所有的功能部件都不是最开始的那些了。问题是，最终产生的这艘船是否还是原来的那艘特修斯之船，还是一艘完全不同的船？如果不是原 来的船，那么在什么时候它不再是原来的船了？哲学家Thomas Hobbes后来对此进来了延伸，如果用特修斯之船上取下来的老部件来重新建造一艘新的船，那么两艘船中哪艘才是真正的特修斯之船？

<strong>解读：
</strong>对 于哲学家，特修斯之船被用来研究身份的本质。特别是讨论一个物体是否仅仅等于其组成部件之和。一个更现代的例子就是一个不断发展的乐队，直到某一阶段乐队 成员中没有任何一个原始成员。这个问题可以应用于各个领域。对于企业，在不断并购和更换东家后仍然保持原来的名字。对于人体，人体不间断的进行着新陈代谢 和自我修复。这个实验的核心思想在于强迫人们去反思身份仅仅局限在实际物体和现象中这一常识。

<strong>5．伽利略的重力实验（Galileo’s Gravity Experiment）
</strong>为 了反驳亚里士多德的自由落体速度取决于物体的质量的理论，伽利略构造了一个简单的思想实验。根据亚里士多德的说法，如果一个轻的物体和一个重的物体绑在一 起然后从塔上丢下来，那么重的物体下落的速度快，两个物体之间的绳子会被拉直。这时轻的物体对重物会产生一个阻力，使得下落速度变慢。但是，从另一方面来 看，两个物体绑在一起以后的质量应该比任意一个单独的物体都大，那么整个系统下落的速度应该最快。这个矛盾证明了亚里士多德的理论是错误的。

<strong>解读：</strong>
这个思想实验帮助证明了一个很重要的理论：无论物体的质量，不考虑阻力的情况下，所有物体自由落体的速率都是一样的。

<strong>4．猴子和打字机（Monkeys and Typewriters）</strong>
另 一个在流行文化中占了很大分量的思想实验是“无限猴子定理”，也叫做“猴子和打字机”实验。定理的内容是，如果无数多的猴子在无数多的打字机上随机打字， 并持续无限久的时间，那么在某个时候，它们必然会打出莎士比亚的全部著作。猴子和打字机的设想在20世纪初被法国数学家Emile Borel推广，但其基本思想（无数多的人员和无数多的时间能产生任何/所有东西）可以追溯至亚里士多德。

<strong>解读：
</strong>简 单来说，“猴子和打字机”定理是用来描述无限的本质的最好方法之一。人的大脑很难想象无限的空间和无限的时间，无限猴子定理可以帮助理解这些概念可以达到 的宽度。猴子能碰巧写出《哈姆雷特》这看上去似乎是违反直觉，但实际上在数学上是可以证明的。这个定理本身在现实生活中是不可能重现的，但这并没有阻止某 些人的尝试：2003年，一家英国动物园的科学家们“试验”了无限猴子定理，他们把一台电脑和一个键盘放进灵长类园区。可惜的是，猴子们并没有打出什么十 四行诗。根据研究者，它们只打出了5页几乎完全是字母“s”的纸。

<strong>3．中文房间（The Chinese Room）
</strong>“中 文房间”最早由美国哲学家John Searle于20世纪80年代初提出。这个实验要求你想象一位只说英语的人身处一个房间之中，这间房间除了门上有一个小窗口以外，全部都是封闭的。他随 身带着一本写有中文翻译程序的书。房间里还有足够的稿纸、铅笔和橱柜。写着中文的纸片通过小窗口被送入房间中。根据Searle的理论，房间中的人可以使 用他的书来翻译这些文字并用中文回复。虽然他完全不会中文，Searle认为通过这个过程，房间里的人可以让任何房间外的人以为他会说流利的中文。

<strong>解读：
</strong>Searle 创造了“中文房间”思想实验来反驳电脑和其他人工智能能够真正思考的观点。房间里的人不会说中文；他不能够用中文思考。但因为他拥有某些特定的工具，他甚 至可以让以中文为母语的人以为他能流利的说中文。根据Searle，电脑就是这样工作的。它们无法真正的理解接收到的信息，但它们可以运行一个程序，处理 信息，然后给出一个智能的印象。

<strong>2．薛定锷的猫（Schrodinger’s Cat）</strong>
薛 定锷的猫最早由物理学家薛定锷提出，是量子力学领域中的一个悖论。其内容是：一只猫、一些放射性元素和一瓶毒气一起被封闭在一个盒子里一个小时。在一个小 时内，放射性元素衰变的几率为50%。如果衰变，那么一个连接在盖革计数器上的锤子就会被触发，并打碎瓶子，释放毒气，杀死猫。因为这件事会否发生的概率 相等，薛定锷认为在盒子被打开前，盒子中的猫被认为是既死又活的。

<strong>解读：</strong>
简而言之，这个 实 验的核心思想是因为事件发生时不存在观察者，盒子里的猫同时存在在其所有可能的状态中（既死又活）。薛定锷最早提出这个实验是在回复一篇讨论量子态叠加的 文章时。薛定锷的猫同时也说明了量子力学的理论是多么令人无法理解。这个思想实验因其复杂性而臭名昭著，同时也启发了各种各样的解释。其中最奇异的就属 “多重世界”假说，这个假说表示有一只死猫和一只活猫，两只猫存在在不同的宇宙之中，并且永远不会有交集。

<strong>1．缸中的大脑（Brain in a Vat）</strong>
没 有比所谓的“缸中的大脑”假说更有影响力的思想实验了。这个思想实验涵盖了从认知学到哲学到流行文化等各个领域。这个实验的内容是：想象有一个疯狂科学家 把你的大脑从你的体内取出，放在某种生命维持液体中。大脑上插着电极，电极连到一台能产生图像和感官信号的电脑上。因为你获取的所有关于这个世界的信息都 是通过你的大脑来处理的，这台电脑就有能力模拟你的日常体验。如果这确实可能的话，你要如何来证明你周围的世界是真实的，而不是由一台电脑产生的某种模拟 环境？

<strong>解读：</strong>
如果你觉得这听起来很像《黑客帝国》，那么你说对了。这部电影以及其他一些 科 幻作品，都是在这个思想实验的影响下创作出来的。这个实验的核心思想是让人们质疑自身经历的本质，并思考作为一个人的真正意义是什么。这个实验的最初原型 可以一直追溯至笛卡尔。在他的《Meditations on the First Philosophy》一书中，笛卡尔提出了能否证明他所有的感官体验都是他自己的，而不是由某个“邪恶的魔鬼”产生的这样的疑问。笛卡尔用他的经典名言 “我思故我在”来回答这个问题。不幸的是，“缸中的大脑”实验更为复杂，因为连接着电极的大脑仍然可以思考。这个实验被广泛的讨论着，有许多对于此实验前 提的反驳，但仍没有人能有力的回应其核心问题：你究竟如何才能知道什么是真实？

转自Acfun <a href="http://www.acfun.tv/v/ac255691/">http://www.acfun.tv/v/ac255691/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2011-10-29 16:37:12</wp:post_date>
		<wp:post_date_gmt>2011-10-29 16:37:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8d%81%e4%b8%aa%e8%91%97%e5%90%8d%e7%9a%84%e6%80%9d%e6%83%b3%e5%ae%9e%e9%aa%8c%ef%bc%88%e7%a5%9e%e5%a5%87%e7%9a%84%e6%80%9d%e6%83%b3%ef%bc%89%e3%80%90%e8%bd%ac%e8%87%aaacfun%e3%80%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9d%82"><![CDATA[杂]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>来GoAgent吧！看看墙外的世界！【转】</title>
		<link>http://xinlinqi.sinaapp.com/2012/02/17/%e6%9d%a5goagent%e5%90%a7%ef%bc%81%e7%9c%8b%e7%9c%8b%e5%a2%99%e5%a4%96%e7%9a%84%e4%b8%96%e7%95%8c%ef%bc%81%e3%80%90%e8%bd%ac%e3%80%91/</link>
		<pubDate>Fri, 17 Feb 2012 13:01:32 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>简易教程</h2>
&nbsp;
<ul>
	<li>如何部署和使用goagent，以Windows为例</li>
<ol>
	<li>申请Google Appengine并创建appid。</li>
	<li>下载goagent 稳定版 <a href="http://nodeload.github.com/phus/goagent/zipball/1.0" rel="nofollow">http://bit.ly/n8LqUi</a>(可能需ssh/vpn)</li>
	<li>双击server\uploader.bat,输入你的appid和你的用户名密码，上传服务端 。（注意：在uploader.bat输入密码时不会显示星号或者其他东西，因为看漏了这几个字曾让我郁闷了好久..）</li>
	<li>修改local\proxy.ini中的<tt>[gae]</tt>下的appid=你创建的appid</li>
	<li>好了，现在你可以运行goagent.exe启动了。注：第一次运行请用管理员权限运行，原因请见FAQ</li>
	<li>chrome请安装<a href="https://chrome.google.com/webstore/detail/dpplabbmogkhghncfbfdeeokoefdjegm" rel="nofollow">SwitchySharp</a>插件，然后导入这个设置<a href="https://raw.github.com/phus/phus-config/master/SwitchyOptions.bak" rel="nofollow">https://raw.github.com/phus/phus-config/master/SwitchyOptions.bak</a></li>
	<li>firefox请安装<a href="https://addons.mozilla.org/zh-cn/firefox/addon/autoproxy/" rel="nofollow">AutoProxy</a></li>
</ol>
</ul>
<blockquote>第一乐章：申请Google App Engine账号（其实就是申请Gmail账号，两者通用。<span style="color: #ff0000;">强烈建议申请一个新的Gmail账号，以方便后续操作。</span>）</blockquote>
网址是<a href="http://appengine.google.com/" target="_blank">http://appengine.google.com</a>

如果已有谷歌账号，那就直接登录吧。
<img src="http://photo.staticsdo.com/a1/430/388/226/69589-1230840885-8.png" alt="goagent" />
<blockquote>第二乐章： 创建Google App Engine的ID</blockquote>
1：顺利登录后，点击Creat an Application

<img src="http://photo.staticsdo.com/a1/494/113/394/69577-1230840885-8.png" alt="goagent" />

2：接着输入你的手机号码，国家选择Other(Not Listed)

<img src="http://photo.staticsdo.com/a1/466/372/76/69578-1230840885-8.png" alt="goagent" />

需要注意的是，手机号码前面要+86 格式如：+8613888888888。然后等待收取手机短信，收到短信后（一串数字号码）填入表单，点send提交.
几秒后，谷歌会发来短信（免费的），里面有一串数字，填上即可。（大量群众反映移动手机收不到短信，而联通和电信可以。）

<img src="http://photo.staticsdo.com/a1/110/124/392/73870-1230840885-8.png" alt="goagent教程" />

3：点击send后，Google App Engine账号即被激活，然后就可以创建新的应用程序了。页面会自动转入“My Applications”页面，点击“Create an Application”新建应用，如下图：

<a href="http://photo.staticsdo.com/a1/46/345/509/73804-1230840885-8.jpg"><img src="http://photo.staticsdo.com/a1/46/345/509/73804-1230840885-8.jpg" alt="goagent教程" width="630" /></a>
下面填写新应用的必要信息，如下图：

<a href="http://img165.poco.cn/mypoco/myphoto/20120127/14/6462514220120127142800018.jpg"><img src="http://img165.poco.cn/mypoco/myphoto/20120127/14/6462514220120127142800018.jpg" alt="goagent教程" width="630" /></a>
在上图中第一处添加一个应用名称，如abcdefg验证一下是否可用，如果通过那么abcdefg就是你的Appid（一定要记住这个id！），而abcdefg.appspot.com就是你的应用服务器地址了。第二个空格就是给你的应用取个名字，可以随便填，最后点击提交按钮，如果能看到下图这个页面，就说明你成功创建了一个新的应用

<img src="http://photo.staticsdo.com/a1/210/176/111/73803-1230840885-8.jpg" alt="goagent教程" />

至此，你已经完成了一个应用的申请，现在强烈建议不要关闭网页，转到<a href="http://appengine.google.com/" target="_blank">http://appengine.google.com</a>页面，一口气把剩下的9个应用也一起申请。因为最近很多朋友反映，关闭网页后再回到谷歌申请应用时，会要求再次验证手机，但是谷歌并不会发送验证短信。这也许是个bug。
问：为什么要创建这么多应用？
答：一个Gmail账户最多可以创建十个Google App Engine应用。每个应用每天有1GB免费流量，10个应用每天就有10GB的流量，这就是有备无患的意思。比如你经常看youtube的视频，1GB的流量大概只能支撑3小时，用完了，就可以换第2个应用继续看了。
<blockquote>第三乐章：创建2步验证</blockquote>
谷歌为了密码更安全，开始使用密码2步验证，简单的说就是登录时的手机验证或密保卡验证(阅读<a href="http://support.google.com/accounts/bin/static.py?hl=zh-Hans&amp;guide=1056283&amp;page=guide.cs&amp;answer=185833&amp;rd=3" target="_blank">谷歌官方说明</a>)。问：这步看上去蛮复杂的，可以免去吗？答：No。

1：登录<a href="https://accounts.google.com/" target="_blank">https://accounts.google.com</a>

<img src="http://img165.poco.cn/mypoco/myphoto/20120123/15/6462514220120123155702090.jpg" alt="null" />

2:点击“使用两步验证”，在新的页面点击“开始设置”，就会看下如下画面。输完手机号后点击“发送代码”，接着你会收到一条验证短信，里面有数字，填上去。最后点击“下一步”

<img src="http://img165.poco.cn/mypoco/myphoto/20120123/16/6462514220120123160326042.jpg" alt="null" />

3：点击“下一步”

<img src="http://img165.poco.cn/mypoco/myphoto/20120123/16/6462514220120123160556063.jpg" alt="null" />

4：点击“启用两步验证”

<img src="http://img2081.poco.cn/mypoco/myphoto/20120123/16/6462514220120123161001079.jpg" alt="null" />

5：点击“创建密码”或回到https://accounts.google.com 点击“向应用程序和网站授权”进行密码的创建

<img src="http://img165.poco.cn/mypoco/myphoto/20120123/16/6462514220120123161310066.jpg" alt="null" />

6：名称可以随便填，接着点击“生成密码

<img src="http://img2081.poco.cn/mypoco/myphoto/20120123/16/6462514220120123161713024.jpg" alt="null" />

7：暂时记下这黄色背景上的密码，等会要用到。（如果不小心关闭了该页面，那就重复一次上面第6步。）

<a href="http://img165.poco.cn/mypoco/myphoto/20120123/16/6462514220120123161730096.jpg"><img src="http://img165.poco.cn/mypoco/myphoto/20120123/16/6462514220120123161730096.jpg" alt="" width="630" /></a>
<blockquote>第四乐章： 下载goagent客户端</blockquote>
下载地址：<a href="http://code.google.com/p/goagent/" target="_blank">http://code.google.com/p/goagent/</a> 备用下载地址：<a href="http://115.com/file/dpgyqe58" target="_blank">http://115.com/file/dpgyqe58</a>

1.把下载下来的压缩包先解压！然后用记事本修改local\proxy.ini中[gae]处的appid=你的appid(每个人的appid申请的都不同，不要写图上的abcmaolihui，这只是个例子,要上传多个id,请用 | 隔开)(注意修改时不要删除空格)

<img src="http://photo.staticsdo.com/a1/146/301/49/83142-1256743317-8.jpg" alt="goagent教程" />

<img src="http://photo.staticsdo.com/a1/238/50/155/83147-1256743317-8.jpg" alt="goagent教程" />

2.打开server\upload.bat（Linux/Mac用户请猛击<a href="http://maolihui.com/goagent-mac.html" target="_blank">这里</a>）。接着依次输入id，账号，和第3乐章第7步的密码后按回车(输入密码时可能看不到任何符号，这是正常的，输完后按回车即可),稍等片刻，程序会自动上传至谷歌服务器（有时可能会失败，多试几次就可以了）

<a href="http://ww4.sinaimg.cn/large/9ed5c127gw1dsfnr81ukfj.jpg"><img src="http://ww4.sinaimg.cn/large/9ed5c127gw1dsfnr81ukfj.jpg" alt="" width="630" /></a>

3:如何检验上传是否成功？其实很简单，登录http://appengine.google.com，若对应的appid出现none deployed，则说明未上传成功。请重新上传。(重新上传的定义:把这个上传失败的文件夹删了,必须重新解压一个,在新的里面进行上传和配置.另外,若上传成功,但是翻墙时碰到文末常见问答1的错误,则还需要把上传的id也删了,重新申请个新id,再重新上传。另外删除id的方法见文末的常见问答)

<img src="http://photo.staticsdo.com/a1/210/271/122/92023-1256743317-8.jpg" alt="null" />

4.至此，所有设置都已完毕。以后每次要翻.墙前先打开local文件夹下的goagent.exe（Mac/Linux运行python proxy.py即可，需要Python版本2.6以上<a href="http://maolihui.com/goagent-mac.html" target="_blank">mac详细教程</a>），通过路由器上网的朋友在代理设置中输入ip地址127.0.0.1和端口8087，下图以谷歌的chrome为例，教你如何设置代理（点击图片可放大）（没用路由器，直接拨号上网的朋友请继续往下看）
<a href="http://photo.staticsdo.com/a1/46/110/475/73989-1230840885-8.jpg"><img src="http://photo.staticsdo.com/a1/46/110/475/73989-1230840885-8.jpg" alt="" width="630" /></a>

有些朋友没有用路由器，是直接拨号上网的，那么设置代理的方法如下：
<a href="http://photo.staticsdo.com/a1/254/46/136/77910-1229517158-8.jpg"><img src="http://photo.staticsdo.com/a1/254/46/136/77910-1229517158-8.jpg" alt="" width="630" /></a>

5.有些朋友说goagent看不了youtube，其实我觉得应该与浏览器兼容性有关，还是建议大家用chrome/opera浏览器进行观看哦。(若chrome/opera提示出现证书安全问题，请看文末常见问答)（youtube正在正常播放哦，看进度条就知道了。）

我的twitter地址是<a href="http://twitter.com/aexwx" target="_blank">http://twitter.com/aexwx</a>
我的新浪微博地址是<a href="http://weibo.com/sin911" target="_blank">http://weibo.com/sin911</a>
嘿嘿

<a href="http://photo.staticsdo.com/a1/18/154/238/73988-1230840885-8.jpg"><img src="http://photo.staticsdo.com/a1/18/154/238/73988-1230840885-8.jpg" alt="" width="630" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2012-02-17 13:01:32</wp:post_date>
		<wp:post_date_gmt>2012-02-17 13:01:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9d%a5goagent%e5%90%a7%ef%bc%81%e7%9c%8b%e7%9c%8b%e5%a2%99%e5%a4%96%e7%9a%84%e4%b8%96%e7%95%8c%ef%bc%81%e3%80%90%e8%bd%ac%e3%80%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>转移塞班短信到魅族手机，不过不是很完善</title>
		<link>http://xinlinqi.sinaapp.com/2012/06/08/%e8%bd%ac%e7%a7%bb%e5%a1%9e%e7%8f%ad%e7%9f%ad%e4%bf%a1%e5%88%b0%e9%ad%85%e6%97%8f%e6%89%8b%e6%9c%ba%ef%bc%8c%e4%b8%8d%e8%bf%87%e4%b8%8d%e6%98%af%e5%be%88%e5%ae%8c%e5%96%84/</link>
		<pubDate>Fri, 08 Jun 2012 08:33:36 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[前几天花了2399入手了MX，这几乎花掉了我这学期赚的所有钱。以前的通讯录是保存在Google Contacts里面的，同步一下就好了。但是以前的短信息不能同步，出于某种想让我的手机看起来更加丰满的险恶用心，我尝试将短信从Nokia 6210S转移到MX。

我现在已经有的资源有6210S中导出的所有短信的txt文件，其格式如下所示：
<blockquote>2012-03-15 09:53:56 张三(+8615012345678)

我爱中国共产党！</blockquote>
其实整个过程无非就是将塞班的TEXT文件中的相关数据信息写入到SQLite数据库中。要做到这一点，熟悉Python对SQLite数据库的操作是必须的。
<blockquote>c = conn.cursor()

# Insert a row of data
c.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")

# Save (commit) the changes
conn.commit()

# We can also close the cursor if we are done with it
c.close()</blockquote>
整个数据转移的过程就用到两个SQL操作，SELECT和INSERT。SELECT操作是为了在插入一行新的短信息的时候检查数据库中是否已经有某一个对话了，若有，则将其thread_id（会话标识字段）设为该对话的thread_id，否则thread_id加1。

现在想想其实很简单，但是当时实现的时候由于对SQLite的不熟悉，最后花了将近3个小时才写完这段不到100行的代码。。。不过当最后看到将短信成功转移到现在这个手机的时候，我还是感到由衷的高兴的。

PS，写的程序在<a title="这里" href="/upload/sms_sybiam_to_android.py">这里</a>，挺弱智的一段代码，行家轻拍]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2012-06-08 08:33:36</wp:post_date>
		<wp:post_date_gmt>2012-06-08 08:33:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bd%ac%e7%a7%bb%e5%a1%9e%e7%8f%ad%e7%9f%ad%e4%bf%a1%e5%88%b0%e9%ad%85%e6%97%8f%e6%89%8b%e6%9c%ba%ef%bc%8c%e4%b8%8d%e8%bf%87%e4%b8%8d%e6%98%af%e5%be%88%e5%ae%8c%e5%96%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://xinlinqi.sinaapp.com/?p=121</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/06/IMG_20120611_124239.jpg"><img class="alignnone size-medium wp-image-122" title="IMG_20120611_124239" src="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/06/IMG_20120611_124239-300x225.jpg" alt="" width="300" height="225" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2012-06-12 03:42:12</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>今日小记——Android编写环境的配置</title>
		<link>http://xinlinqi.sinaapp.com/2012/06/15/%e4%bb%8a%e6%97%a5%e5%b0%8f%e8%ae%b0%e2%80%94%e2%80%94android%e7%bc%96%e5%86%99%e7%8e%af%e5%a2%83%e7%9a%84%e9%85%8d%e7%bd%ae/</link>
		<pubDate>Fri, 15 Jun 2012 13:31:42 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[今天召开了Android实训TA会议，按照会议精神，是得好好熟悉实训案例，熟悉Android的。于是趁热打铁，捡起上一年的残存的关于Android的回忆，整理出来一部分，记下来，以飨自己！
<h4>1. 关于Android的API Level和版本号的关系。</h4>
参考这里：http://developer.android.com/guide/appendix/api-levels.html
<table>
<tbody>
<tr>
<th>Platform Version</th>
<th>API Level</th>
<th>VERSION_CODE</th>
<th>Notes</th>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-4.0.3.html">Android 4.0.3</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/15/changes.html">15</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH_MR1">ICE_CREAM_SANDWICH_MR1</a></code></td>
<td rowspan="2"><a href="http://developer.android.com/sdk/android-4.0-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-4.0.html">Android 4.0, 4.0.1, 4.0.2</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/14/changes.html">14</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH">ICE_CREAM_SANDWICH</a></code></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-3.2.html">Android 3.2</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/13/changes.html">13</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB_MR2">HONEYCOMB_MR2</a></code></td>
<td></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-3.1.html">Android 3.1.x</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/12/changes.html">12</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB_MR1">HONEYCOMB_MR1</a></code></td>
<td><a href="http://developer.android.com/sdk/android-3.1-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-3.0.html">Android 3.0.x</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/11/changes.html">11</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB">HONEYCOMB</a></code></td>
<td><a href="http://developer.android.com/sdk/android-3.0-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-2.3.3.html">Android 2.3.4
Android 2.3.3</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/10/changes.html">10</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD_MR1">GINGERBREAD_MR1</a></code></td>
<td rowspan="2"><a href="http://developer.android.com/sdk/android-2.3-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-2.3.html">Android 2.3.2
Android 2.3.1
Android 2.3</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/9/changes.html">9</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD">GINGERBREAD</a></code></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-2.2.html">Android 2.2.x</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/8/changes.html">8</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#FROYO">FROYO</a></code></td>
<td><a href="http://developer.android.com/sdk/android-2.2-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-2.1.html">Android 2.1.x</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/7/changes.html">7</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ECLAIR_MR1">ECLAIR_MR1</a></code></td>
<td rowspan="3"><a href="http://developer.android.com/sdk/android-2.0-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-2.0.1.html">Android 2.0.1</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/6/changes.html">6</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ECLAIR_0_1">ECLAIR_0_1</a></code></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-2.0.html">Android 2.0</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/5/changes.html">5</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ECLAIR">ECLAIR</a></code></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-1.6.html">Android 1.6</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/4/changes.html">4</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#DONUT">DONUT</a></code></td>
<td><a href="http://developer.android.com/sdk/android-1.6-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-1.5.html">Android 1.5</a></td>
<td><a title="Diff Report" href="http://developer.android.com/sdk/api_diff/3/changes.html">3</a></td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#CUPCAKE">CUPCAKE</a></code></td>
<td><a href="http://developer.android.com/sdk/android-1.5-highlights.html">Platform Highlights</a></td>
</tr>
<tr>
<td><a href="http://developer.android.com/sdk/android-1.1.html">Android 1.1</a></td>
<td>2</td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#BASE_1_1">BASE_1_1</a></code></td>
<td></td>
</tr>
<tr>
<td>Android 1.0</td>
<td>1</td>
<td><code><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#BASE">BASE</a></code></td>
<td></td>
</tr>
</tbody>
</table>
<h4>2. 导入AndEngine源代码的时候，运行出现以下错误：。</h4>
<a href="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/06/QQ截图20120623103714.png"><img src="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/06/QQ截图20120623103714-300x86.png" alt="" title="QQ截图20120623103714" width="300" height="86" class="alignnone size-medium wp-image-138" /></a>
上网查了下，解决方法很简单：property-Android-去掉is_library勾选。
<a href="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/06/QQ截图20120623103905.png"><img src="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/06/QQ截图20120623103905-300x283.png" alt="" title="QQ截图20120623103905" width="300" height="283" class="alignnone size-medium wp-image-139" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2012-06-15 13:31:42</wp:post_date>
		<wp:post_date_gmt>2012-06-15 13:31:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bb%8a%e6%97%a5%e5%b0%8f%e8%ae%b0%e2%80%94%e2%80%94android%e7%bc%96%e5%86%99%e7%8e%af%e5%a2%83%e7%9a%84%e9%85%8d%e7%bd%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android 源码编译总结</title>
		<link>http://xinlinqi.sinaapp.com/2012/07/14/android-%e6%ba%90%e7%a0%81%e7%bc%96%e8%af%91%e6%80%bb%e7%bb%93/</link>
		<pubDate>Sat, 14 Jul 2012 11:14:09 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>
<h4>事情来由</h4>
</li>
</ul>
由于老板和数字家庭那边有合作关系，又看着我们做实训TA肯定会比较闲，于是安排我和ZY去做这个编译Android源码、之作ROM包的事。我毕业设计是Web开发的，ZY虽然做过Android应用，但是也没接触过源码，于是两个菜逼茫然地踏上了看似毫无希望可言的征程。
<ul>
	<li>
<h4>正文</h4>
</li>
</ul>
感谢伟大的互联网，感谢伟大的GNU！网上有很多关于Android源码编译的文章，我们参考的是Android官网上的关于源码编译的阐述。
<blockquote><a href="http://source.android.com/source/index.html">http://source.android.com/source/index.html</a></blockquote>
&nbsp;

刚开始的时候，我们直接掠过Initialize的部分，跳到Build页面，然后一步步下来，这个做法被后面证实是多么的愚蠢！Android源码的编译需要用到很多工具程序的，比如gcc，java等等。正确的可行的做法如下所示：
<blockquote>Step 1. <a href="http://source.android.com/source/initializing.html">http://source.android.com/source/initializing.html</a>进行编译环境的初始化。

Step 2. <a href="http://source.android.com/source/downloading.html">http://source.android.com/source/downloading.html</a>下载源代码到本地。

Step 3. <a href="http://source.android.com/source/building.html">http://source.android.com/source/building.html</a>进行源代码的编译。

Step 4. 用Android模拟器运行生成的System.img， userdata.img，ramdisk.img。这一步可以在Windows底下运行。

最后，推荐一个挺有趣的视频，包括了上面说到的step1-3，<a href="http://www.youtube.com/watch?v=H_ReU-0w4IE">http://www.youtube.com/watch?v=H_ReU-0w4IE</a></blockquote>
<ul>
	<li>
<h4>注意</h4>
</li>
</ul>
1.  初始化的部分就是耐心等待那些软件的安装，如果你的机器上没有的话。还有就是注意安装sun-java6-jdk，而不是openjdk什么的，否则会出错。

2.  下载源代码的部分我们只是简单地Repo Sync一下就完事了，没做后面的Authentication部分。当然，注意选择Android的版本号。

3. 进行源码的编译，其需要浪费的青春是由电脑的配置有关的，我们这次比较幸运，可以有高性能的服务器可以使用，大概花了几十分钟就搞定了。注意make 的时候要加一些参数，这是ZY找到的，我也没有蛋疼到去比较加与不加这些参数的效率。

4. 本来以为得到那些镜像文件，然后用模拟器运行是水到渠成的事情。但是这部分我花的精力最多，经历多次静默黑屏，不断修正每一个错误，然后总结出应该这么做：
<blockquote>1. 首先将Android编译好后的三个镜像文件（System.img， userdata.img，ramdisk.img，在~/&lt;WORKING_DIR&gt;/out/target/product/generic/下），内核文件（kernel-qemu和kernel-qemu-armv7， 在~/&lt;WORKING_DIR&gt;/prebuilt/android-arm/kernel/，本机亲测前者无用，后者有用）放到windows 的SDK安装路径，&lt;android-sdk&gt;/tools/lib/images下，如果没有images文件夹，建之。

2. 使用以下命令来创建sdcard

mksdcard -l &lt;name&gt; &lt;size&gt; sdcard.img

3. emulator -image system.img -ramdisk ramdisk.img -data userdata.img -kernel kernel-qemu-armv7 -sdcard sdcard.img -skindir skins -skin WVGA800 -scale 0.7 -memory 512 -partition-size 1024 运行之，即可。当然其中skins要从sdk的某个API中拷贝出来，然后放到images下；emulator要加入系统环境变量直接才能使用。</blockquote>
最后终于看着模拟器上的系统开机动画，十多分钟后出现的时钟，都感觉太tmd亲切了，mua！
<ul>
	<li> 后记</li>
</ul>
后来发现以上做的只是小试牛刀而已，老板要我们做的是编译linaro
<blockquote><a href="http://www.linaro.org/">http://www.linaro.org/</a>，</blockquote>
不过简单地看下文档，和编译Android源码的方法差不多，于是心里也就平衡了~

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2012-07-14 11:14:09</wp:post_date>
		<wp:post_date_gmt>2012-07-14 11:14:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-%e6%ba%90%e7%a0%81%e7%bc%96%e8%af%91%e6%80%bb%e7%bb%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[OAHMOA &raquo; Android4.0源码编译]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://1.oahmoa.sinaapp.com/?p=4</wp:comment_author_url>
			<wp:comment_author_IP>220.181.136.230</wp:comment_author_IP>
			<wp:comment_date>2012-07-15 08:28:33</wp:comment_date>
			<wp:comment_date_gmt>2012-07-15 08:28:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 刚被boss的一封邮件加两条短信骂的狗血淋头，只有赶紧来补救，于是也趁着机会写个博客。其实所做的事情已经被xlq（挨骂与共的战友）写的差不多了，只是想站在我的角度记录一下。原文： http://xinlinqi.sinaapp.com/2012/07/14/android-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%80%BB%E7%BB%9... [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Android ADT20 问题及解决</title>
		<link>http://xinlinqi.sinaapp.com/?p=160</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[前几天被核心TA忽悠说最新的ADT对AndEngine的支持更好，于是屁颠屁颠地把电脑里的ADT更新了。然后发现很多问题。正如我的手机在刷到Flyme 1.0之后问题频出一样，追求新的潮的东西不是一件好事！
<h6>1. 有同学问到：新建Android项目的时候怎么没有Android Project选项了？</h6>
现在想想这个问题有点傻，但当时确实难到我了，因为里面多出了Android Application Project，但是参数选择和界面完全和以前的不一样，于是迷惑了，是不是这个咧？最后试一下之后，嗯，确实是这个！
<h6>2. 更新之后不能新建Android 工程了，问题截图如下：
<a href="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/07/Screenshot.png"><img class="alignnone size-medium wp-image-161" title="Screenshot" src="http://xinlinqi-wordpress.stor.sinaapp.com/uploads/2012/07/Screenshot-300x278.png" alt="" width="300" height="278" /></a></h6>
这个问题也被实训同学问到过，在网上搜索了一下，Google很给力，没花多长时间就给我一个很满意的回答。解决方法是，通过SDK Manager卸载Android Support Library,然后再重新安装，重启Eclipse即可。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2012-07-16 12:27:10</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sicily1294. 高级机密 </title>
		<link>http://xinlinqi.sinaapp.com/?p=165</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[水题！！

超级水题不解释~~~

只要知道
<blockquote><strong>（ab）mod c = ((a mod c) (b mod c)) mod c</strong></blockquote>
就差不多可以搞定噻！

具体代码如下所示：
[sourcecode language="cpp"]
#include &lt;iostream&gt;
using namespace std;

string bigNumAdd(string a, string b){
	int min = (a.length() &lt; b.length())?a.length():b.length();
	int max = (a.length() &gt; b.length())?a.length():b.length();
	int carry = 0;
	string retStr = &quot;&quot;;
	int sum = 0;
	for(int i=0; i &lt; min; i++){
		sum = carry + a[i] - '0' + b[i] - '0';
		carry = sum / 10;

	}
}

int main(void){
	string retStr = &quot;&quot;;
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2012-10-03 05:53:59</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://xinlinqi.sinaapp.com/?p=174</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>xinlinqi</dc:creator>
		<guid isPermaLink="false">http://xinlinqi.sinaapp.com/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[[sourcecode language="cpp"]
#include &lt;iostream&gt;
using namespace std;

string bigNumAdd(string a, string b){
	int min = (a.length() &lt; b.length())?a.length():b.length();
	int max = (a.length() &gt; b.length())?a.length():b.length();
	int carry = 0;
	string retStr = &quot;&quot;;
	int sum = 0;
	for(int i=0; i &lt; min; i++){
		sum = carry + a[i] - '0' + b[i] - '0';
		carry = sum / 10;

	}
}

int main(void){
	string retStr = &quot;&quot;;
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date>2012-10-02 14:12:33</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python%e3%80%81django"><![CDATA[Django]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
